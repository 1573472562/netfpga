#!/bin/env python

from NFTestLib import *
from NFTestHeader import reg_defines, scapy
from PacketLib import *

import random

import sys

interfaces = ("nf2c0", "nf2c1", "nf2c2", "nf2c3")

nftest_init(interfaces, 'conn')
nftest_start()

nftest_barrier()

# set parameters
DA = "00:ca:fe:00:00:01"
SA = "aa:bb:cc:dd:ee:ff"
TTL = 64
DST_IP = "192.168.1.1"
SRC_IP = "192.168.0.1"
nextHopMAC = "dd:55:dd:66:dd:77"
if isHW():
    NUM_PKTS = 50
else:
    NUM_PKTS = 5

pkts = [[],[],[],[]]
for i in range(NUM_PKTS):
    pkts[0].append(make_IP_pkt(dst_MAC=DA, src_MAC=SA, dst_IP=DST_IP,
                             src_IP=SRC_IP, TTL=TTL,
                             pkt_len=random.randint(60,1514)))

DA = "00:ca:fe:00:00:02"
for i in range(NUM_PKTS):
    pkts[1].append(make_IP_pkt(dst_MAC=DA, src_MAC=SA, dst_IP=DST_IP,
                             src_IP=SRC_IP, TTL=TTL,
                             pkt_len=random.randint(60,1514)))


DA = "00:ca:fe:00:00:03"
for i in range(NUM_PKTS):
    pkts[2].append(make_IP_pkt(dst_MAC=DA, src_MAC=SA, dst_IP=DST_IP,
                             src_IP=SRC_IP, TTL=TTL,
                             pkt_len=random.randint(60,1514)))


DA = "00:ca:fe:00:00:04"
for i in range(NUM_PKTS):
    pkts[3].append(make_IP_pkt(dst_MAC=DA, src_MAC=SA, dst_IP=DST_IP,
                             src_IP=SRC_IP, TTL=TTL,
                             pkt_len=random.randint(60,1514)))

print "Sending now: "
pkt = None
totalPktLengths = [0,0,0,0]
# send NUM_PKTS from ports nf2c0...nf2c3
for i in range(NUM_PKTS):
    sys.stdout.write('\r'+str(i))
    sys.stdout.flush()
    for port in range(4):
        totalPktLengths[port] += len(pkts[port][i])
        nftest_send_dma('nf2c' + str(port), pkts[port][i])
        nftest_expect_dma('nf2c' + str(port), pkts[port][i])

print ""

nftest_barrier()

total_errors = 0

print "Checking pkt errors"
# check counter values
for i in range(4):
    reg_data = 0
    reg_data = nftest_regread_expect(reg_defines.MAC_GRP_0_RX_QUEUE_NUM_PKTS_STORED_REG() + i*0x40000, NUM_PKTS)

    if isHW() and reg_data != NUM_PKTS:
        total_errors += 1
        print "ERROR: MAC Queue ", str(i), " counters are wrong"
        print "   Rx pkts stored: ", str(reg_data), "     expected: ", str(NUM_PKTS)

    reg_data = nftest_regread_expect(reg_defines.MAC_GRP_0_TX_QUEUE_NUM_PKTS_SENT_REG() + i*0x40000, NUM_PKTS)

    if isHW() and reg_data != NUM_PKTS:
        total_errors += 1
        print "ERROR: MAC Queue ", str(i), " counters are wrong"
        print "   Tx pkts sent: ", str(reg_data), "     expected: ", str(NUM_PKTS)


    reg_data = nftest_regread_expect(reg_defines.MAC_GRP_0_RX_QUEUE_NUM_BYTES_PUSHED_REG() + i*0x40000, totalPktLengths[i])

    if isHW() and reg_data != totalPktLengths[i]:
        total_errors += 1
        print "ERROR: MAC Queue ", str(i), " counters are wrong"
        print "   Rx pkts pushed: ", str(reg_data), "     expected: ", str(totalPktLengths[i])


    reg_data = nftest_regread_expect(reg_defines.MAC_GRP_0_TX_QUEUE_NUM_BYTES_PUSHED_REG() + i*0x40000, totalPktLengths[i])

    if isHW() and reg_data != totalPktLengths[i]:
        total_errors += 1
        print "ERROR: MAC Queue ", str(i), " counters are wrong"
        print "   Tx pkts pushed: ", str(reg_data), "     expected: ", str(totalPktLengths[i])

total_errors += nftest_finish()

if total_errors == 0:
    print 'SUCCESS!'
    sys.exit(0)
else:
    print 'FAIL: ' + str(total_errors) + ' errors'
    sys.exit(1)
